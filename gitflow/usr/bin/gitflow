#!/bin/bash
set -e

# Debug mode with controlled output
if [ "${GITFLOW_DEBUG:-0}" = "1" ]; then
    set -x
    export PS4='+(${BASH_SOURCE}:${LINENO}): ${FUNCNAME[0]:+${FUNCNAME[0]}(): }'
fi

# Detect system paths and environment
detect_system_paths() {
    local script_path="$(readlink -f "$0")"
    local script_dir="$(dirname "$script_path")"
    local system_dir=""
    
    # Test environment takes precedence
    if [ -n "$GITFLOW_TEST_ENV" ]; then
        system_dir="$GITFLOW_TEST_DIR/usr/share/gitflow"
    # Build environment check
    elif [ -n "$GITFLOW_WORK_DIR" ]; then
        system_dir="$GITFLOW_WORK_DIR/usr/share/gitflow"
    # System installation
    elif [ -d "/usr/share/gitflow" ]; then
        system_dir="/usr/share/gitflow"
    # Development environment
    elif [ -d "$script_dir/../share/gitflow" ]; then
        system_dir="$script_dir/../share/gitflow"
    else
        echo "❌ Error: Unable to locate gitflow installation" >&2
        exit 1
    fi

    # Export detected paths
    export GITFLOW_SYSTEM_DIR="$system_dir"
    export GITFLOW_LIB_DIR="$system_dir/lib"
}

# Initialize system paths
detect_system_paths

# Source required libraries with error handling
source_library() {
    local lib="$1"
    local lib_path="$GITFLOW_LIB_DIR/$lib"
    
    if [ ! -f "$lib_path" ]; then
        echo "❌ Library not found: $lib" >&2
        echo "Looking in: $lib_path" >&2
        return 1
    fi

    if ! source "$lib_path" 2>/dev/null; then
        echo "❌ Failed to source library: $lib" >&2
        return 1
    fi

    return 0
}

# Required libraries in load order
declare -a required_libs=(
    "constants.sh"
    "utils.sh"
    "git.sh"
    "hook-management.sh"
)

# Source each library
for lib in "${required_libs[@]}"; do
    if ! source_library "$lib"; then
        echo "❌ Fatal: Failed to load required library: $lib" >&2
        exit 1
    fi
done

# Check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Not a git repository"
        exit 1
    fi
}

show_help() {
    cat <<EOF
GitFlow Hook Manager - Modular Git Hook Management

Usage: 
  gitflow <command> <hook-name> [options]

Commands:
  install     Install a hook (e.g., gitflow install doc-update-hook)
  uninstall   Remove a hook
  reinstall   Reinstall a hook (combines uninstall and install)
  list        Show available hooks
  config      Configure a specific hook's settings

Options:
  --help     Show this help message
  --version  Show version information
  --force    Force operation (with install/uninstall)

Examples:
  gitflow install doc-update-hook    Install the doc-update hook
  gitflow uninstall pre-commit      Uninstall the pre-commit hook
  gitflow list                      Show all available hooks
  gitflow config doc-update-hook    Configure doc-update hook settings

For more information, visit: https://github.com/yourusername/gitflow
EOF
}

show_version() {
    echo "GitFlow Hook Manager v0.1.0"
    echo "Copyright (c) 2024 GitFlow Maintainers"
}

# Main command processing
main() {
    [ -z "$1" ] && { show_help; exit 0; }

    case "$1" in
        "install")
            shift
            if [ -z "$1" ]; then
                log_error "Hook name required"
                echo "Usage: gitflow install <hook-name>"
                exit 1
            fi
            check_git_repo
            install_specific_hook "$1"
            ;;
            
        "uninstall")
            shift
            if [ -z "$1" ]; then
                log_error "Hook name required"
                echo "Usage: gitflow uninstall <hook-name>"
                exit 1
            fi
            check_git_repo
            uninstall_hook "$1"
            ;;
            
        "reinstall")
            shift
            if [ -z "$1" ]; then
                log_error "Hook name required"
                echo "Usage: gitflow reinstall <hook-name>"
                exit 1
            fi
            check_git_repo
            if uninstall_hook "$1"; then
                install_specific_hook "$1"
            else
                log_error "Failed to reinstall hook: $1"
                exit 1
            fi
            ;;
            
        "list")
            list_available_hooks
            ;;
            
        "config")
            shift
            if [ -z "$1" ]; then
                log_error "Hook name required"
                echo "Usage: gitflow config <hook-name>"
                exit 1
            fi
            check_git_repo
            if ! configure_hook "$1"; then
                log_error "Failed to configure hook: $1"
                exit 1
            fi
            ;;
            
        "--help")
            show_help
            ;;
            
        "--version")
            show_version
            ;;
            
        *)
            log_error "Unknown command: $1"
            echo
            show_help
            exit 1
            ;;
    esac
}

main "$@"