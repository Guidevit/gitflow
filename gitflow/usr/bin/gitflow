#!/bin/bash
set -e

# Ensure GITFLOW_SYSTEM_DIR is set
if [ -z "$GITFLOW_SYSTEM_DIR" ]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
    if [ -d "$SCRIPT_DIR/../share/gitflow" ]; then
        GITFLOW_SYSTEM_DIR="$SCRIPT_DIR/../share/gitflow"
    else
        echo "❌ Error: GITFLOW_SYSTEM_DIR not set and unable to locate gitflow directory"
        exit 1
    fi
fi

# Set and validate library directory
GITFLOW_LIB_DIR="$GITFLOW_SYSTEM_DIR/lib"
if [ ! -d "$GITFLOW_LIB_DIR" ]; then
    echo "❌ Error: Required library directory not found: $GITFLOW_LIB_DIR"
    exit 1
fi

# Source required libraries with error checking
declare -a required_libs=(
    "constants.sh"
    "utils.sh"
    "config.sh"
    "hook-management.sh"
    "git.sh"
)

for lib in "${required_libs[@]}"; do
    if [ ! -f "$GITFLOW_LIB_DIR/$lib" ]; then
        echo "❌ Error: Required library not found: $lib"
        exit 1
    fi
    source "$GITFLOW_LIB_DIR/$lib"
done

# Ensure config directory exists
mkdir -p "$GITFLOW_USER_CONFIG_DIR"

# Check if we're in a git repository for git-specific commands
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Not a git repository"
        exit 1
    fi
}

# Command help functions
show_main_help() {
    cat <<EOF
Usage: gitflow <command> [subcommand] [options]

Core Commands:
  hook       Manage Git hooks
  plugin     Manage plugins
  config     Configure gitflow settings

Run 'gitflow <command> --help' for command-specific help
EOF
}

show_hook_help() {
    cat <<EOF
Usage: gitflow hook <subcommand> [options]

Subcommands:
  install    Install a hook (e.g., gitflow hook install pre-commit)
  uninstall  Remove a hook
  list       Show available hooks
  update     Update installed hooks
  status     Show hook status

Options:
  --force    Force operation
  --all      Apply to all hooks
EOF
}

show_plugin_help() {
    cat <<EOF
Usage: gitflow plugin <subcommand> [options]

Subcommands:
  install    Install a plugin
  uninstall  Remove a plugin
  list       Show installed plugins
  update     Update plugins
  config     Configure plugin settings

Options:
  --force    Force operation
  --all      Apply to all plugins
EOF
}

show_config_help() {
    cat <<EOF
Usage: gitflow config <subcommand> [options]

Subcommands:
  show       Show current configuration
  edit       Edit configuration
  reset      Reset configuration
  set        Set specific configuration value

Options:
  --global   Apply to global configuration
  --local    Apply to local repository only
EOF
}

# Hook management functions
handle_hook_command() {
    local subcommand=$1
    shift

    case "$subcommand" in
        "install")
            [ -z "$1" ] && { log_error "Hook name required"; show_hook_help; exit 1; }
            check_git_repo
            install_specific_hook "$1"
            ;;
        "uninstall")
            [ -z "$1" ] && { log_error "Hook name required"; show_hook_help; exit 1; }
            check_git_repo
            uninstall_hook "$1"
            ;;
        "list")
            list_available_hooks
            ;;
        "update")
            check_git_repo
            update_installed_hooks "$@"
            ;;
        "status")
            check_git_repo
            show_hook_status
            ;;
        "--help")
            show_hook_help
            ;;
        *)
            log_error "Unknown hook subcommand: $subcommand"
            show_hook_help
            exit 1
            ;;
    esac
}

# Plugin management functions
handle_plugin_command() {
    local subcommand=$1
    shift

    case "$subcommand" in
        "install")
            [ -z "$1" ] && { log_error "Plugin name required"; show_plugin_help; exit 1; }
            install_plugin "$1"
            ;;
        "uninstall")
            [ -z "$1" ] && { log_error "Plugin name required"; show_plugin_help; exit 1; }
            uninstall_plugin "$1"
            ;;
        "list")
            list_installed_plugins
            ;;
        "update")
            update_plugins "$@"
            ;;
        "config")
            configure_plugin "$@"
            ;;
        "--help")
            show_plugin_help
            ;;
        *)
            log_error "Unknown plugin subcommand: $subcommand"
            show_plugin_help
            exit 1
            ;;
    esac
}

# Configuration management functions
handle_config_command() {
    local subcommand=$1
    shift

    case "$subcommand" in
        "show")
            if [ -f "$GITFLOW_USER_CONFIG" ]; then
                echo "📝 Current configuration:"
                echo "------------------------"
                cat "$GITFLOW_USER_CONFIG" | sed 's/^/  /'
            else
                log_warning "No configuration found"
            fi
            ;;
        "edit")
            if [ -z "$EDITOR" ]; then
                EDITOR=vi
            fi
            $EDITOR "$GITFLOW_USER_CONFIG"
            ;;
        "reset")
            read -p "⚠️  Are you sure you want to reset configuration? (y/N) " confirm
            if [[ $confirm =~ ^[Yy]$ ]]; then
                rm -f "$GITFLOW_USER_CONFIG"
                log_success "Configuration reset successfully"
            else
                echo "Reset cancelled"
            fi
            ;;
        "set")
            if [ -z "$1" ]; then
                log_error "Configuration key required"
                show_config_help
                exit 1
            fi
            key="$1"
            value="$2"
            if [ -z "$value" ]; then
                read -p "Enter value for $key: " value
            fi
            
            mkdir -p "$(dirname "$GITFLOW_USER_CONFIG")"
            
            if grep -q "^${key}=" "$GITFLOW_USER_CONFIG" 2>/dev/null; then
                sed -i "s|^${key}=.*|${key}=${value}|" "$GITFLOW_USER_CONFIG"
            else
                echo "${key}=${value}" >> "$GITFLOW_USER_CONFIG"
            fi
            log_success "Configuration updated: ${key}=${value}"
            ;;
        "--help")
            show_config_help
            ;;
        *)
            log_error "Unknown config subcommand: $subcommand"
            show_config_help
            exit 1
            ;;
    esac
}

# Main command processing
main() {
    [ -z "$1" ] && { show_main_help; exit 0; }

    case "$1" in
        "hook")
            shift
            handle_hook_command "$@"
            ;;
        "plugin")
            shift
            handle_plugin_command "$@"
            ;;
        "config")
            shift
            handle_config_command "$@"
            ;;
        "--help")
            show_main_help
            ;;
        "--version")
            echo "gitflow version 0.1.0"
            ;;
        *)
            log_error "Unknown command: $1"
            show_main_help
            exit 1
            ;;
    esac
}

main "$@"